/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def POM_NAME="DocuStream"
def POM_PACKAGING="aar"

def POM_DESCRIPTION="Storage of object that gets serialized and encrypted"

def POM_URL="https://github.com/aFrogleap/docustream"
def POM_SCM_URL="https://github.com/aFrogleap/docustream"
def POM_SCM_CONNECTION="scm:git@github.com:afrogleap/docustream.git"
def POM_SCM_DEV_CONNECTION="scm:git@github.com:afrogleap/docustream.git"

def POM_LICENCE_NAME="MIT License"
def POM_LICENCE_URL="https://opensource.org/licenses/MIT"
def POM_LICENCE_DIST="repo"

def POM_DEVELOPER_ID="ZenoxParadox"
def POM_DEVELOPER_NAME="Killian Bos"

def VERSION_NAME="0.0.3"
def GROUP="com.afrogleap.docustream"
def POM_ARTIFACT_ID="docustream"

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

    final String repository
    final Boolean signRequired

    ReleaseProfile(String url, boolean sign){
        repository = url
        signRequired = sign
    }

    static def getProfile(String profile) {
        if (profile != null) {
            for (ReleaseProfile item in values()) {
                if (item.name().equalsIgnoreCase(profile)) {
                    return item
                }
            }
        }

        return NONE
    }
}

def releaseProfile = ReleaseProfile.NONE

afterEvaluate { project ->

    System.out.println("======================")
    if (project.hasProperty("profile")) {
        releaseProfile = ReleaseProfile.getProfile(project.profile)
    }
    System.out.println("releaseProfile -> ${releaseProfile}")
    System.out.println("======================")

    if (releaseProfile == ReleaseProfile.NONE) {
        return
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID

                switch (releaseProfile) {
                    case ReleaseProfile.RELEASE:
                        pom.version = project.ext.pom_version

                        repository(url: ReleaseProfile.RELEASE.repository) {
                            authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
                        }
                        break
                    case ReleaseProfile.SNAPSHOT:
                        pom.version = project.ext.pom_version + "-SNAPSHOT"

                        snapshotRepository(url: ReleaseProfile.SNAPSHOT.repository) {
                            authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
                        }

                        break
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { releaseProfile.signRequired && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    //task androidJavadocs(type: Javadoc) {
    //source = android.sourceSets.main.allJava
    //}

    //task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    //classifier = 'javadoc'
    //from androidJavadocs.destinationDir
    //}

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
    }
}